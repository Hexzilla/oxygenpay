// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateSupportedPaymentMethodsRequest update supported payment methods request
//
// swagger:model updateSupportedPaymentMethodsRequest
type UpdateSupportedPaymentMethodsRequest struct {

	// supported payment methods
	// Required: true
	// Min Items: 1
	SupportedPaymentMethods []string `json:"supportedPaymentMethods"`
}

// Validate validates this update supported payment methods request
func (m *UpdateSupportedPaymentMethodsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSupportedPaymentMethods(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateSupportedPaymentMethodsRequestSupportedPaymentMethodsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ETH","ETH_USDT","MATIC","MATIC_USDT","TRON","TRON_USDT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateSupportedPaymentMethodsRequestSupportedPaymentMethodsItemsEnum = append(updateSupportedPaymentMethodsRequestSupportedPaymentMethodsItemsEnum, v)
	}
}

func (m *UpdateSupportedPaymentMethodsRequest) validateSupportedPaymentMethodsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateSupportedPaymentMethodsRequestSupportedPaymentMethodsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateSupportedPaymentMethodsRequest) validateSupportedPaymentMethods(formats strfmt.Registry) error {

	if err := validate.Required("supportedPaymentMethods", "body", m.SupportedPaymentMethods); err != nil {
		return err
	}

	iSupportedPaymentMethodsSize := int64(len(m.SupportedPaymentMethods))

	if err := validate.MinItems("supportedPaymentMethods", "body", iSupportedPaymentMethodsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.SupportedPaymentMethods); i++ {

		// value enum
		if err := m.validateSupportedPaymentMethodsItemsEnum("supportedPaymentMethods"+"."+strconv.Itoa(i), "body", m.SupportedPaymentMethods[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this update supported payment methods request based on context it is used
func (m *UpdateSupportedPaymentMethodsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateSupportedPaymentMethodsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateSupportedPaymentMethodsRequest) UnmarshalBinary(b []byte) error {
	var res UpdateSupportedPaymentMethodsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
